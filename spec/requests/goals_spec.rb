require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/goals', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Goal. As you add validations to Goal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    user = User.create(sub: 'google-oauth2|108940937413760665889', name: 'Sergio', given_name: 'Sergio', family_name: 'Cortes',
                picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg', email: 'test3@gmail.com')
    { sub: user.sub, coin_id: 1, goal: 1 }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # GoalsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {
      'Content-Type': 'application/json',
      authorization: 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtBWG50ekZ6QWlOM2RZek9aOU1xcSJ9.eyJpc3MiOiJodHRwczovL2Rldi03cGhjY2staC51cy5hdXRoMC5jb20vIiwic3ViIjoic04zaHBvamQ1VnJIRUc3VmxhS2drWVRKYzg0T0JXd1ZAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vdHJhY2tlci1hcGkvIiwiaWF0IjoxNjMwNDI1MTE2LCJleHAiOjE2MzA1MTE1MTYsImF6cCI6InNOM2hwb2pkNVZySEVHN1ZsYUtna1lUSmM4NE9CV3dWIiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.KDTDgKJ3-v9TTZtAEl-ARyv4Sc7qWa_eugQFz_KWgICNb0Xi6kHtdZ_AJOJJ4sQbPqKXitEhuwDlPzJeDTgI8LEsMVfLIV2aULmA_gW2E-CeVCZEwGw-BIXNxXWfJfXaxumhDIln98Ftx9BwRaMgthpWH8jvJ1aX5z_XNFQGHe0upD5QFRxmH_fTSMSYpauHTlZowVsCX18iKPzkxff_rg9yC68TesIJT3dobMwBgIDmQJVIHd5WHAAkScYnwQZXvmKwr8EDhAvKiydL8NkCc_jfLtWgIQvEB83Za64ZHk_h7ZH6EOBmk-vrGdJXlL2qClwUI761PXk2dt2tt8xFGQ'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Goal.create! valid_attributes
      get goals_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      goal = Goal.create! valid_attributes
      get goal_url(goal), as: :json
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested goal' do
        goal = Goal.create! valid_attributes
        patch goal_url(goal),
              params: { goal: new_attributes }, headers: valid_headers, as: :json
        goal.reload
        skip('Add assertions for updated state')
      end

      it 'renders a JSON response with the goal' do
        goal = Goal.create! valid_attributes
        patch goal_url(goal),
              params: { goal: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the goal' do
        goal = Goal.create! valid_attributes
        patch goal_url(goal),
              params: { goal: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end
end
